-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_TOP_FFT_Stage1_vectorstream_parameterize_Loop_FFT_Stage1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reverse_in_stream_vector_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    reverse_in_stream_vector_empty_n : IN STD_LOGIC;
    reverse_in_stream_vector_read : OUT STD_LOGIC;
    reverse_in_stream_vector_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    reverse_in_stream_vector_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    data_s1_stream_vector_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    data_s1_stream_vector_full_n : IN STD_LOGIC;
    data_s1_stream_vector_write : OUT STD_LOGIC;
    data_s1_stream_vector_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    data_s1_stream_vector_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT_TOP_FFT_Stage1_vectorstream_parameterize_Loop_FFT_Stage1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln451_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reverse_in_stream_vector_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_s1_stream_vector_blk_n : STD_LOGIC;
    signal d0_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal d0_24_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_44_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_25_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_26_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_45_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_46_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_27_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_28_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_47_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_48_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_29_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d0_30_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_49_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_50_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_150 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal m_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_m1_load : STD_LOGIC_VECTOR (4 downto 0);
    signal reverse_in_stream_vector_read_local : STD_LOGIC;
    signal or_ln466_s_fu_668_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal data_s1_stream_vector_write_local : STD_LOGIC;
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_2_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_3_fu_261_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_4_fu_271_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_5_fu_281_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_6_fu_291_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_7_fu_301_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_8_fu_311_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_9_fu_321_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_s_fu_331_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_1_fu_341_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_10_fu_351_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_11_fu_361_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_12_fu_371_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_13_fu_381_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln456_14_fu_391_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_15_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_14_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_13_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_12_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_11_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_10_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_9_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_8_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_7_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_6_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_5_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_4_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_3_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_2_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_1_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln466_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_ce : STD_LOGIC;
    signal pre_grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_167_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_ce : STD_LOGIC;
    signal pre_grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_171_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_ce : STD_LOGIC;
    signal pre_grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_175_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_ce : STD_LOGIC;
    signal pre_grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_179_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_ce : STD_LOGIC;
    signal pre_grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_183_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_ce : STD_LOGIC;
    signal pre_grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_187_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_ce : STD_LOGIC;
    signal pre_grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_191_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_ce : STD_LOGIC;
    signal pre_grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_195_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_199_ce : STD_LOGIC;
    signal pre_grp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_199_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_ce : STD_LOGIC;
    signal pre_grp_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_203_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_ce : STD_LOGIC;
    signal pre_grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_207_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_ce : STD_LOGIC;
    signal pre_grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_211_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_ce : STD_LOGIC;
    signal pre_grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_215_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_ce : STD_LOGIC;
    signal pre_grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_219_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_ce : STD_LOGIC;
    signal pre_grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_223_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_ce : STD_LOGIC;
    signal pre_grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pre_grp_fu_227_p2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_201 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_TOP_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_4_no_dsp_1_U3 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_167_p0,
        din1 => grp_fu_167_p1,
        ce => grp_fu_167_ce,
        dout => pre_grp_fu_167_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U4 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        ce => grp_fu_171_ce,
        dout => pre_grp_fu_171_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U5 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => grp_fu_175_ce,
        dout => pre_grp_fu_175_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U6 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_179_p0,
        din1 => grp_fu_179_p1,
        ce => grp_fu_179_ce,
        dout => pre_grp_fu_179_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U7 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => grp_fu_183_ce,
        dout => pre_grp_fu_183_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U8 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_187_p0,
        din1 => grp_fu_187_p1,
        ce => grp_fu_187_ce,
        dout => pre_grp_fu_187_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U9 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_191_p0,
        din1 => grp_fu_191_p1,
        ce => grp_fu_191_ce,
        dout => pre_grp_fu_191_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U10 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_195_p0,
        din1 => grp_fu_195_p1,
        ce => grp_fu_195_ce,
        dout => pre_grp_fu_195_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U11 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_199_p0,
        din1 => grp_fu_199_p1,
        ce => grp_fu_199_ce,
        dout => pre_grp_fu_199_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U12 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        ce => grp_fu_203_ce,
        dout => pre_grp_fu_203_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U13 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        ce => grp_fu_207_ce,
        dout => pre_grp_fu_207_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U14 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => pre_grp_fu_211_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U15 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        ce => grp_fu_215_ce,
        dout => pre_grp_fu_215_p2);

    fadd_32ns_32ns_32_4_no_dsp_1_U16 : component FFT_TOP_fadd_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => pre_grp_fu_219_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U17 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => grp_fu_223_ce,
        dout => pre_grp_fu_223_p2);

    fsub_32ns_32ns_32_4_no_dsp_1_U18 : component FFT_TOP_fsub_32ns_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_227_p0,
        din1 => grp_fu_227_p1,
        ce => grp_fu_227_ce,
        dout => pre_grp_fu_227_p2);

    flow_control_loop_pipe_U : component FFT_TOP_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    grp_fu_167_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_167_ce <= ap_const_logic_1;
            else 
                grp_fu_167_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_171_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_171_ce <= ap_const_logic_1;
            else 
                grp_fu_171_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_175_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_175_ce <= ap_const_logic_1;
            else 
                grp_fu_175_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_179_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_179_ce <= ap_const_logic_1;
            else 
                grp_fu_179_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_183_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_183_ce <= ap_const_logic_1;
            else 
                grp_fu_183_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_187_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_187_ce <= ap_const_logic_1;
            else 
                grp_fu_187_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_191_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_191_ce <= ap_const_logic_1;
            else 
                grp_fu_191_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_195_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_195_ce <= ap_const_logic_1;
            else 
                grp_fu_195_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_199_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_199_ce <= ap_const_logic_1;
            else 
                grp_fu_199_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_203_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_203_ce <= ap_const_logic_1;
            else 
                grp_fu_203_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_207_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_207_ce <= ap_const_logic_1;
            else 
                grp_fu_207_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_211_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_211_ce <= ap_const_logic_1;
            else 
                grp_fu_211_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_215_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_215_ce <= ap_const_logic_1;
            else 
                grp_fu_215_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_219_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_219_ce <= ap_const_logic_1;
            else 
                grp_fu_219_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_223_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_223_ce <= ap_const_logic_1;
            else 
                grp_fu_223_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    grp_fu_227_ce_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_227_ce <= ap_const_logic_1;
            else 
                grp_fu_227_ce <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    m1_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_201)) then
                m1_fu_150 <= m_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                grp_fu_167_p0 <= d0_fu_401_p1;
                grp_fu_167_p1 <= d1_fu_409_p1;
                grp_fu_171_p0 <= d0_24_fu_405_p1;
                grp_fu_171_p1 <= d1_44_fu_413_p1;
                grp_fu_175_p0 <= d0_fu_401_p1;
                grp_fu_175_p1 <= d1_fu_409_p1;
                grp_fu_179_p0 <= d0_24_fu_405_p1;
                grp_fu_179_p1 <= d1_44_fu_413_p1;
                grp_fu_183_p0 <= d0_25_fu_417_p1;
                grp_fu_183_p1 <= d1_45_fu_425_p1;
                grp_fu_187_p0 <= d0_26_fu_421_p1;
                grp_fu_187_p1 <= d1_46_fu_429_p1;
                grp_fu_191_p0 <= d0_25_fu_417_p1;
                grp_fu_191_p1 <= d1_45_fu_425_p1;
                grp_fu_195_p0 <= d0_26_fu_421_p1;
                grp_fu_195_p1 <= d1_46_fu_429_p1;
                grp_fu_199_p0 <= d0_27_fu_433_p1;
                grp_fu_199_p1 <= d1_47_fu_441_p1;
                grp_fu_203_p0 <= d0_28_fu_437_p1;
                grp_fu_203_p1 <= d1_48_fu_445_p1;
                grp_fu_207_p0 <= d0_27_fu_433_p1;
                grp_fu_207_p1 <= d1_47_fu_441_p1;
                grp_fu_211_p0 <= d0_28_fu_437_p1;
                grp_fu_211_p1 <= d1_48_fu_445_p1;
                grp_fu_215_p0 <= d0_29_fu_449_p1;
                grp_fu_215_p1 <= d1_49_fu_457_p1;
                grp_fu_219_p0 <= d0_30_fu_453_p1;
                grp_fu_219_p1 <= d1_50_fu_461_p1;
                grp_fu_223_p0 <= d0_29_fu_449_p1;
                grp_fu_223_p1 <= d1_49_fu_457_p1;
                grp_fu_227_p0 <= d0_30_fu_453_p1;
                grp_fu_227_p1 <= d1_50_fu_461_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_167_ce = ap_const_logic_1)) then
                pre_grp_fu_167_p2_reg <= pre_grp_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_171_ce = ap_const_logic_1)) then
                pre_grp_fu_171_p2_reg <= pre_grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_175_ce = ap_const_logic_1)) then
                pre_grp_fu_175_p2_reg <= pre_grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_179_ce = ap_const_logic_1)) then
                pre_grp_fu_179_p2_reg <= pre_grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_183_ce = ap_const_logic_1)) then
                pre_grp_fu_183_p2_reg <= pre_grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_187_ce = ap_const_logic_1)) then
                pre_grp_fu_187_p2_reg <= pre_grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_191_ce = ap_const_logic_1)) then
                pre_grp_fu_191_p2_reg <= pre_grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_195_ce = ap_const_logic_1)) then
                pre_grp_fu_195_p2_reg <= pre_grp_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_199_ce = ap_const_logic_1)) then
                pre_grp_fu_199_p2_reg <= pre_grp_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_203_ce = ap_const_logic_1)) then
                pre_grp_fu_203_p2_reg <= pre_grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_207_ce = ap_const_logic_1)) then
                pre_grp_fu_207_p2_reg <= pre_grp_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_211_ce = ap_const_logic_1)) then
                pre_grp_fu_211_p2_reg <= pre_grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_215_ce = ap_const_logic_1)) then
                pre_grp_fu_215_p2_reg <= pre_grp_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_219_ce = ap_const_logic_1)) then
                pre_grp_fu_219_p2_reg <= pre_grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_223_ce = ap_const_logic_1)) then
                pre_grp_fu_223_p2_reg <= pre_grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_227_ce = ap_const_logic_1)) then
                pre_grp_fu_227_p2_reg <= pre_grp_fu_227_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(reverse_in_stream_vector_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (reverse_in_stream_vector_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(data_s1_stream_vector_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (data_s1_stream_vector_full_n = ap_const_logic_0);
    end process;


    ap_condition_201_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_201 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln451_fu_593_p2, ap_start_int)
    begin
        if (((icmp_ln451_fu_593_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_m1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, m1_fu_150, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_m1_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_m1_load <= m1_fu_150;
        end if; 
    end process;

    bitcast_ln466_10_fu_644_p1 <= grp_fu_207_p2;
    bitcast_ln466_11_fu_648_p1 <= grp_fu_211_p2;
    bitcast_ln466_12_fu_652_p1 <= grp_fu_215_p2;
    bitcast_ln466_13_fu_656_p1 <= grp_fu_219_p2;
    bitcast_ln466_14_fu_660_p1 <= grp_fu_223_p2;
    bitcast_ln466_15_fu_664_p1 <= grp_fu_227_p2;
    bitcast_ln466_1_fu_608_p1 <= grp_fu_171_p2;
    bitcast_ln466_2_fu_612_p1 <= grp_fu_175_p2;
    bitcast_ln466_3_fu_616_p1 <= grp_fu_179_p2;
    bitcast_ln466_4_fu_620_p1 <= grp_fu_183_p2;
    bitcast_ln466_5_fu_624_p1 <= grp_fu_187_p2;
    bitcast_ln466_6_fu_628_p1 <= grp_fu_191_p2;
    bitcast_ln466_7_fu_632_p1 <= grp_fu_195_p2;
    bitcast_ln466_8_fu_636_p1 <= grp_fu_199_p2;
    bitcast_ln466_9_fu_640_p1 <= grp_fu_203_p2;
    bitcast_ln466_fu_604_p1 <= grp_fu_167_p2;
    d0_24_fu_405_p1 <= trunc_ln456_2_fu_251_p4;
    d0_25_fu_417_p1 <= trunc_ln456_5_fu_281_p4;
    d0_26_fu_421_p1 <= trunc_ln456_6_fu_291_p4;
    d0_27_fu_433_p1 <= trunc_ln456_9_fu_321_p4;
    d0_28_fu_437_p1 <= trunc_ln456_s_fu_331_p4;
    d0_29_fu_449_p1 <= trunc_ln456_11_fu_361_p4;
    d0_30_fu_453_p1 <= trunc_ln456_12_fu_371_p4;
    d0_fu_401_p1 <= trunc_ln456_fu_247_p1;
    d1_44_fu_413_p1 <= trunc_ln456_4_fu_271_p4;
    d1_45_fu_425_p1 <= trunc_ln456_7_fu_301_p4;
    d1_46_fu_429_p1 <= trunc_ln456_8_fu_311_p4;
    d1_47_fu_441_p1 <= trunc_ln456_1_fu_341_p4;
    d1_48_fu_445_p1 <= trunc_ln456_10_fu_351_p4;
    d1_49_fu_457_p1 <= trunc_ln456_13_fu_381_p4;
    d1_50_fu_461_p1 <= trunc_ln456_14_fu_391_p4;
    d1_fu_409_p1 <= trunc_ln456_3_fu_261_p4;

    data_s1_stream_vector_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, data_s1_stream_vector_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            data_s1_stream_vector_blk_n <= data_s1_stream_vector_full_n;
        else 
            data_s1_stream_vector_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_s1_stream_vector_din <= or_ln466_s_fu_668_p17;
    data_s1_stream_vector_write <= data_s1_stream_vector_write_local;

    data_s1_stream_vector_write_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            data_s1_stream_vector_write_local <= ap_const_logic_1;
        else 
            data_s1_stream_vector_write_local <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_167_p2_assign_proc : process(grp_fu_167_ce, pre_grp_fu_167_p2, pre_grp_fu_167_p2_reg)
    begin
        if ((grp_fu_167_ce = ap_const_logic_1)) then 
            grp_fu_167_p2 <= pre_grp_fu_167_p2;
        else 
            grp_fu_167_p2 <= pre_grp_fu_167_p2_reg;
        end if; 
    end process;


    grp_fu_171_p2_assign_proc : process(grp_fu_171_ce, pre_grp_fu_171_p2, pre_grp_fu_171_p2_reg)
    begin
        if ((grp_fu_171_ce = ap_const_logic_1)) then 
            grp_fu_171_p2 <= pre_grp_fu_171_p2;
        else 
            grp_fu_171_p2 <= pre_grp_fu_171_p2_reg;
        end if; 
    end process;


    grp_fu_175_p2_assign_proc : process(grp_fu_175_ce, pre_grp_fu_175_p2, pre_grp_fu_175_p2_reg)
    begin
        if ((grp_fu_175_ce = ap_const_logic_1)) then 
            grp_fu_175_p2 <= pre_grp_fu_175_p2;
        else 
            grp_fu_175_p2 <= pre_grp_fu_175_p2_reg;
        end if; 
    end process;


    grp_fu_179_p2_assign_proc : process(grp_fu_179_ce, pre_grp_fu_179_p2, pre_grp_fu_179_p2_reg)
    begin
        if ((grp_fu_179_ce = ap_const_logic_1)) then 
            grp_fu_179_p2 <= pre_grp_fu_179_p2;
        else 
            grp_fu_179_p2 <= pre_grp_fu_179_p2_reg;
        end if; 
    end process;


    grp_fu_183_p2_assign_proc : process(grp_fu_183_ce, pre_grp_fu_183_p2, pre_grp_fu_183_p2_reg)
    begin
        if ((grp_fu_183_ce = ap_const_logic_1)) then 
            grp_fu_183_p2 <= pre_grp_fu_183_p2;
        else 
            grp_fu_183_p2 <= pre_grp_fu_183_p2_reg;
        end if; 
    end process;


    grp_fu_187_p2_assign_proc : process(grp_fu_187_ce, pre_grp_fu_187_p2, pre_grp_fu_187_p2_reg)
    begin
        if ((grp_fu_187_ce = ap_const_logic_1)) then 
            grp_fu_187_p2 <= pre_grp_fu_187_p2;
        else 
            grp_fu_187_p2 <= pre_grp_fu_187_p2_reg;
        end if; 
    end process;


    grp_fu_191_p2_assign_proc : process(grp_fu_191_ce, pre_grp_fu_191_p2, pre_grp_fu_191_p2_reg)
    begin
        if ((grp_fu_191_ce = ap_const_logic_1)) then 
            grp_fu_191_p2 <= pre_grp_fu_191_p2;
        else 
            grp_fu_191_p2 <= pre_grp_fu_191_p2_reg;
        end if; 
    end process;


    grp_fu_195_p2_assign_proc : process(grp_fu_195_ce, pre_grp_fu_195_p2, pre_grp_fu_195_p2_reg)
    begin
        if ((grp_fu_195_ce = ap_const_logic_1)) then 
            grp_fu_195_p2 <= pre_grp_fu_195_p2;
        else 
            grp_fu_195_p2 <= pre_grp_fu_195_p2_reg;
        end if; 
    end process;


    grp_fu_199_p2_assign_proc : process(grp_fu_199_ce, pre_grp_fu_199_p2, pre_grp_fu_199_p2_reg)
    begin
        if ((grp_fu_199_ce = ap_const_logic_1)) then 
            grp_fu_199_p2 <= pre_grp_fu_199_p2;
        else 
            grp_fu_199_p2 <= pre_grp_fu_199_p2_reg;
        end if; 
    end process;


    grp_fu_203_p2_assign_proc : process(grp_fu_203_ce, pre_grp_fu_203_p2, pre_grp_fu_203_p2_reg)
    begin
        if ((grp_fu_203_ce = ap_const_logic_1)) then 
            grp_fu_203_p2 <= pre_grp_fu_203_p2;
        else 
            grp_fu_203_p2 <= pre_grp_fu_203_p2_reg;
        end if; 
    end process;


    grp_fu_207_p2_assign_proc : process(grp_fu_207_ce, pre_grp_fu_207_p2, pre_grp_fu_207_p2_reg)
    begin
        if ((grp_fu_207_ce = ap_const_logic_1)) then 
            grp_fu_207_p2 <= pre_grp_fu_207_p2;
        else 
            grp_fu_207_p2 <= pre_grp_fu_207_p2_reg;
        end if; 
    end process;


    grp_fu_211_p2_assign_proc : process(grp_fu_211_ce, pre_grp_fu_211_p2, pre_grp_fu_211_p2_reg)
    begin
        if ((grp_fu_211_ce = ap_const_logic_1)) then 
            grp_fu_211_p2 <= pre_grp_fu_211_p2;
        else 
            grp_fu_211_p2 <= pre_grp_fu_211_p2_reg;
        end if; 
    end process;


    grp_fu_215_p2_assign_proc : process(grp_fu_215_ce, pre_grp_fu_215_p2, pre_grp_fu_215_p2_reg)
    begin
        if ((grp_fu_215_ce = ap_const_logic_1)) then 
            grp_fu_215_p2 <= pre_grp_fu_215_p2;
        else 
            grp_fu_215_p2 <= pre_grp_fu_215_p2_reg;
        end if; 
    end process;


    grp_fu_219_p2_assign_proc : process(grp_fu_219_ce, pre_grp_fu_219_p2, pre_grp_fu_219_p2_reg)
    begin
        if ((grp_fu_219_ce = ap_const_logic_1)) then 
            grp_fu_219_p2 <= pre_grp_fu_219_p2;
        else 
            grp_fu_219_p2 <= pre_grp_fu_219_p2_reg;
        end if; 
    end process;


    grp_fu_223_p2_assign_proc : process(grp_fu_223_ce, pre_grp_fu_223_p2, pre_grp_fu_223_p2_reg)
    begin
        if ((grp_fu_223_ce = ap_const_logic_1)) then 
            grp_fu_223_p2 <= pre_grp_fu_223_p2;
        else 
            grp_fu_223_p2 <= pre_grp_fu_223_p2_reg;
        end if; 
    end process;


    grp_fu_227_p2_assign_proc : process(grp_fu_227_ce, pre_grp_fu_227_p2, pre_grp_fu_227_p2_reg)
    begin
        if ((grp_fu_227_ce = ap_const_logic_1)) then 
            grp_fu_227_p2 <= pre_grp_fu_227_p2;
        else 
            grp_fu_227_p2 <= pre_grp_fu_227_p2_reg;
        end if; 
    end process;

    icmp_ln451_fu_593_p2 <= "1" when (ap_sig_allocacmp_m1_load = ap_const_lv5_1F) else "0";
    m_fu_239_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m1_load) + unsigned(ap_const_lv5_1));
    or_ln466_s_fu_668_p17 <= (((((((((((((((bitcast_ln466_15_fu_664_p1 & bitcast_ln466_14_fu_660_p1) & bitcast_ln466_13_fu_656_p1) & bitcast_ln466_12_fu_652_p1) & bitcast_ln466_11_fu_648_p1) & bitcast_ln466_10_fu_644_p1) & bitcast_ln466_9_fu_640_p1) & bitcast_ln466_8_fu_636_p1) & bitcast_ln466_7_fu_632_p1) & bitcast_ln466_6_fu_628_p1) & bitcast_ln466_5_fu_624_p1) & bitcast_ln466_4_fu_620_p1) & bitcast_ln466_3_fu_616_p1) & bitcast_ln466_2_fu_612_p1) & bitcast_ln466_1_fu_608_p1) & bitcast_ln466_fu_604_p1);

    reverse_in_stream_vector_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, reverse_in_stream_vector_empty_n, ap_done_reg, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reverse_in_stream_vector_blk_n <= reverse_in_stream_vector_empty_n;
        else 
            reverse_in_stream_vector_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    reverse_in_stream_vector_read <= reverse_in_stream_vector_read_local;

    reverse_in_stream_vector_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            reverse_in_stream_vector_read_local <= ap_const_logic_1;
        else 
            reverse_in_stream_vector_read_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln456_10_fu_351_p4 <= reverse_in_stream_vector_dout(383 downto 352);
    trunc_ln456_11_fu_361_p4 <= reverse_in_stream_vector_dout(415 downto 384);
    trunc_ln456_12_fu_371_p4 <= reverse_in_stream_vector_dout(447 downto 416);
    trunc_ln456_13_fu_381_p4 <= reverse_in_stream_vector_dout(479 downto 448);
    trunc_ln456_14_fu_391_p4 <= reverse_in_stream_vector_dout(511 downto 480);
    trunc_ln456_1_fu_341_p4 <= reverse_in_stream_vector_dout(351 downto 320);
    trunc_ln456_2_fu_251_p4 <= reverse_in_stream_vector_dout(63 downto 32);
    trunc_ln456_3_fu_261_p4 <= reverse_in_stream_vector_dout(95 downto 64);
    trunc_ln456_4_fu_271_p4 <= reverse_in_stream_vector_dout(127 downto 96);
    trunc_ln456_5_fu_281_p4 <= reverse_in_stream_vector_dout(159 downto 128);
    trunc_ln456_6_fu_291_p4 <= reverse_in_stream_vector_dout(191 downto 160);
    trunc_ln456_7_fu_301_p4 <= reverse_in_stream_vector_dout(223 downto 192);
    trunc_ln456_8_fu_311_p4 <= reverse_in_stream_vector_dout(255 downto 224);
    trunc_ln456_9_fu_321_p4 <= reverse_in_stream_vector_dout(287 downto 256);
    trunc_ln456_fu_247_p1 <= reverse_in_stream_vector_dout(32 - 1 downto 0);
    trunc_ln456_s_fu_331_p4 <= reverse_in_stream_vector_dout(319 downto 288);
end behav;
